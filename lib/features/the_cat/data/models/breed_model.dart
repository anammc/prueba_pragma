import 'package:prueba_pragma/features/the_cat/data/models/weight_model.dart';
import 'package:prueba_pragma/features/the_cat/domain/entities/breed.dart';

class BreedModel extends Breed {
  BreedModel(
      {required super.weight,
      required super.images,
      required super.id,
      required super.name,
      required super.cfaUrl,
      required super.vetstreetUrl,
      required super.vcahospitalsUrl,
      required super.temperament,
      required super.origin,
      required super.countryCodes,
      required super.countryCode,
      required super.description,
      required super.lifeSpan,
      required super.indoor,
      required super.lap,
      required super.altNames,
      required super.adaptability,
      required super.affectionLevel,
      required super.childFriendly,
      required super.dogFriendly,
      required super.energyLevel,
      required super.grooming,
      required super.healthIssues,
      required super.intelligence,
      required super.sheddingLevel,
      required super.socialNeeds,
      required super.strangerFriendly,
      required super.vocalisation,
      required super.experimental,
      required super.hairless,
      required super.natural,
      required super.rare,
      required super.rex,
      required super.suppressedTail,
      required super.shortLegs,
      required super.wikipediaUrl,
      required super.hypoallergenic,
      required super.referenceImageId});

  factory BreedModel.fromJson(json) {
    return BreedModel(
        weight: WeightModel.fromJson(json['weight']),
        images: json['images'],
        id: json['id'],
        name: json['name'],
        cfaUrl: json['cfa_url'],
        vetstreetUrl: json['vetstreet_url'],
        vcahospitalsUrl: json['vcahospitals_url'],
        temperament: json['temperament'],
        origin: json['origin'],
        countryCodes: json['country_codes'],
        countryCode: json['country_code'],
        description: json['description'],
        lifeSpan: json['life_span'],
        indoor: json['indoor'],
        lap: json['lap'],
        altNames: json['alt_names'],
        adaptability: json['adaptability'],
        affectionLevel: json['affection_level'],
        childFriendly: json['child_friendly'],
        dogFriendly: json['dog_friendly'],
        energyLevel: json['energy_level'],
        grooming: json['grooming'],
        healthIssues: json['health_issues'],
        intelligence: json['intelligence'],
        sheddingLevel: json['shedding_level'],
        socialNeeds: json['social_needs'],
        strangerFriendly: json['stranger_friendly'],
        vocalisation: json['vocalisation'],
        experimental: json['experimental'],
        hairless: json['hairless'],
        natural: json['natural'],
        rare: json['rare'],
        rex: json['rex'],
        suppressedTail: json['suppressed_tail'],
        shortLegs: json['short_legs'],
        wikipediaUrl: json['wikipedia_url'],
        hypoallergenic: json['hypoallergenic'],
        referenceImageId: json['reference_image_id']);
  }

  Map<String, dynamic> toJson() => {
        'weight': weight?.toJson(),
        'id': id,
        'name': name,
        'cfa_url': cfaUrl,
        'vetstreet_url': vetstreetUrl,
        'vcahospitals_url': vcahospitalsUrl,
        'temperament': temperament,
        'origin': origin,
        'country_codes': countryCodes,
        'country_code': countryCode,
        'description': description,
        'life_span': lifeSpan,
        'indoor': indoor,
        'lap': lap,
        'alt_names': altNames,
        'adaptability': adaptability,
        'affection_level': affectionLevel,
        'child_friendly': childFriendly,
        'dog_friendly': dogFriendly,
        'energy_level': energyLevel,
        'grooming': grooming,
        'health_issues': healthIssues,
        'intelligence': intelligence,
        'shedding_level': sheddingLevel,
        'social_needs': socialNeeds,
        'stranger_friendly': strangerFriendly,
        'vocalisation': vocalisation,
        'experimental': experimental,
        'hairless': hairless,
        'natural': natural,
        'rare': rare,
        'rex': rex,
        'suppressed_tail': suppressedTail,
        'short_legs': shortLegs,
        'wikipedia_url': wikipediaUrl,
        'hypoallergenic': hypoallergenic,
        'reference_image_id': referenceImageId
      };

  factory BreedModel.fromEntity(Breed breed) {
    return BreedModel(
        weight: breed.weight,
        images: breed.images,
        id: breed.id,
        name: breed.name,
        cfaUrl: breed.cfaUrl,
        vetstreetUrl: breed.vetstreetUrl,
        vcahospitalsUrl: breed.vcahospitalsUrl,
        temperament: breed.temperament,
        origin: breed.origin,
        countryCodes: breed.countryCodes,
        countryCode: breed.countryCode,
        description: breed.description,
        lifeSpan: breed.lifeSpan,
        indoor: breed.indoor,
        lap: breed.lap,
        altNames: breed.altNames,
        adaptability: breed.adaptability,
        affectionLevel: breed.affectionLevel,
        childFriendly: breed.childFriendly,
        dogFriendly: breed.dogFriendly,
        energyLevel: breed.energyLevel,
        grooming: breed.grooming,
        healthIssues: breed.healthIssues,
        intelligence: breed.intelligence,
        sheddingLevel: breed.sheddingLevel,
        socialNeeds: breed.socialNeeds,
        strangerFriendly: breed.strangerFriendly,
        vocalisation: breed.vocalisation,
        experimental: breed.experimental,
        hairless: breed.hairless,
        natural: breed.natural,
        rare: breed.rare,
        rex: breed.rex,
        suppressedTail: breed.suppressedTail,
        shortLegs: breed.shortLegs,
        wikipediaUrl: breed.wikipediaUrl,
        hypoallergenic: breed.hypoallergenic,
        referenceImageId: breed.referenceImageId);
  }
}
